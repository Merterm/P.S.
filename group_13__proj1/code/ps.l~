%{
  #include <string>
  #include <iostream>
  using namespace std;
  int commentLevel = 0;
%}

%x IN_COMMENT

/*Definitions of Some Basic Tokens */
INT	[0-9]+
FLOAT	0"."[0-9]+
CHAR	[a-zA-Z\-\\\*]
ID	[a-zA-Z\-\\\*]+
NUM	"["({INT}|{FLOAT})"]"
POS	\[({INT}|{FLOAT}|{ID}),({INT}|{FLOAT}|{ID})\]
RGB	\[({INT}|{FLOAT}|{ID}),({INT}|{FLOAT}|{ID}),({INT}|{FLOAT}|{ID})\]	 

%%

<INITIAL>("d"|"D")"ear "("k"|"K")"akubo"[,]? 		printf("<MAIN>");
<INITIAL>("p"|"P")"lease"[,]?				printf("<BEGIN_OF_BLOCK>");
<INITIAL>("t"|"T")"hank you"["."]?			printf("<END_OF_BLOCK>");
<INITIAL>[\!] 						printf("<END_OF_PRGM>");
<INITIAL>"."						printf("<END_OF_INPUT>");
<INITIAL>("b"|"B")"est "("w"|"W")"ishes"["."]?		printf("<END_OF_MAIN>");
<INITIAL>"P.S."						printf("<FUNCTION>");
<INITIAL>"P.P.S."					printf("<USR_DEF_SHAPE>");
<INITIAL>("I"|"i")" defined the function"		printf("<FUNCT_NAME>");
<INITIAL>"as the following:"				printf("<END_OF_DEF>");
<INITIAL>"which is a"					printf("<INHERITANCE>");
<INITIAL>("I"|"i")" defined"				printf("<USR_SHAPE_NAME>");
<INITIAL>"also"						printf("<PARAM_DELIM>");
<INITIAL>("d"|"D")"raw"					printf("<DRAW>");
<INITIAL>"position"					printf("<POSITION>");
<INITIAL>"width"					printf("<WIDTH>");
<INITIAL>"height"					printf("<HEIGHT>");
<INITIAL>"stroke"					printf("<STROKE>");
<INITIAL>"color"					printf("<COLOR>");
<INITIAL>"fill state"					printf("<FILL_STATE>");
<INITIAL>"fill color"					printf("<FILL_COLOR>");
<INITIAL>"border state"					printf("<BORDR_STATE>");
<INITIAL>"border color" 				printf("<BORDR_COLR>");
<INITIAL>"red"						printf("<RED>");
<INITIAL>"blue"						printf("<BLUE>");
<INITIAL>"green"					printf("<GREEN>");
<INITIAL>"yellow"					printf("<YELLOW>");
<INITIAL>"black"					printf("<BLACK>");
<INITIAL>"white"					printf("<WHITE>");
<INITIAL>"rounded corners"				printf("<RND_CRNRS>");
<INITIAL>"name"						printf("<NAME>");
<INITIAL>"start"					printf("<START>");
<INITIAL>"end"						printf("<END>");
<INITIAL>"arrow start"					printf("<ARROW_STRT>");
<INITIAL>"arrow end"					printf("<ARROW_END>");
<INITIAL>("o"|"O")"val"|("r"|"R")"ectangle"|("l"|"L")"ine"	printf("<SHAPE>");
<INITIAL>"direction"					printf("<DIR>");
<INITIAL>("N"|"W"|"S"|"E"|"NW"|"NE"|"SW"|"SE")		printf("<DIR_VAL");
<INITIAL>"~"("character"|"char"|"integer"|"int")"~"	printf("<TYPECAST>");		
<INITIAL>"if"|"with the condition that"|"in case of"|"in case that"|"on the occasion"	printf("<IF>");
<INITIAL>"else"|"if not"				printf("<ELSE>");
<INITIAL>[\+|\-|\*|\/|\%]|"add"|"plus"|"minus"|"subtract"|"multiply"|"divide"|"modulo"	printf("<OP>");
<INITIAL>("greater"|"bigger"|"larger")"than"|[>]	printf("<GRTR>");
<INITIAL>("smaller"|"less")"than"|[<]			printf("<LESS>");
<INITIAL>[\=]|"is"|"assign"				printf("<ASSIGNMENT>");
<INITIAL>"is equal to"|[\=\=]				printf("<LOG_EQ>"); 
<INITIAL>("greater"|"bigger"|"larger")"than or equal to"|">="	printf("<GRTR_EQ>");
<INITIAL>("less"|"smaller")"than or equal to"|"<="	printf("<LESS_EQ>");
<INITIAL>"&&"|"and"					printf("<AND>");
<INITIAL>"||"|"or"					printf("<OR>");
<INITIAL>"times"					printf("<FOR>");
<INITIAL>"["({INT}|{FLOAT})"]"				printf("<NUM>");
<INITIAL>\"([^\"\\\n]|\\\"|\\n|\\t|\\\\)*\" 		printf("<STRING>");
<INITIAL>\'{CHAR}\'					printf("<CHAR>");
<INITIAL>{RGB}						printf("<RGB>");
<INITIAL>{POS}						printf("<POS_X_POS_Y>");
<INITIAL>","						printf("<PARAMETER>");
<INITIAL>"with"					printf("<USR_DEF_PARAM>");
<INITIAL>"'s"						printf("<ACCESS>");
<INITIAL>"has"						printf("<USR_DEF_VAR>");
<INITIAL>"at"|"using"|"a " | "an "			;
<INITIAL>"(".*")"					;
<INITIAL>{ID}						printf("<ID>");
<INITIAL>[ \t\n]+ 					;

%%
int yywrap(void) {
  return 1;
}

int main(void) {
  yylex();
  return 0;
}
